{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"is-invalid\": a0\n});\nfunction TransferComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"h5\");\n    i0.ɵɵtext(2, \"Employee Details\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\")(4, \"strong\");\n    i0.ɵɵtext(5, \"Name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\")(8, \"strong\");\n    i0.ɵɵtext(9, \"Current Department:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r0.employee.account == null ? null : ctx_r0.employee.account.firstName, \" \", ctx_r0.employee.account == null ? null : ctx_r0.employee.account.lastName, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", (ctx_r0.employee.department == null ? null : ctx_r0.employee.department.name) || \"None\", \"\");\n  }\n}\nfunction TransferComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const department_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", department_r2.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(department_r2.name);\n  }\n}\nfunction TransferComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Department is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransferComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, TransferComponent_div_13_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.departmentId.errors.required);\n  }\n}\nfunction TransferComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 18);\n  }\n}\nexport let TransferComponent = /*#__PURE__*/(() => {\n  class TransferComponent {\n    constructor(formBuilder, route, router, departmentService, employeeService, alertService, workflowService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.departmentService = departmentService;\n      this.employeeService = employeeService;\n      this.alertService = alertService;\n      this.workflowService = workflowService;\n      this.loading = false;\n      this.submitted = false;\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.form = this.formBuilder.group({\n        departmentId: ['', Validators.required]\n      });\n      // Load departments for dropdown\n      this.departmentService.getAll().pipe(first()).subscribe(departments => this.departments = departments);\n      // Load employee details\n      this.employeeService.getById(this.id).pipe(first()).subscribe(employee => {\n        this.employee = employee;\n        this.oldDepartmentId = employee.department?.id;\n        this.form.patchValue({\n          departmentId: this.oldDepartmentId\n        });\n      });\n    }\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      const newDepartmentId = this.form.value.departmentId;\n      this.employeeService.transfer(this.id, newDepartmentId).pipe(first()).subscribe({\n        next: () => {\n          // Create workflow record after successful transfer\n          this.createTransferWorkflow(newDepartmentId);\n          this.alertService.success('Transfer successful', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    createTransferWorkflow(newDepartmentId) {\n      const oldDeptName = this.departments.find(d => d.id === this.oldDepartmentId)?.name || 'Unknown';\n      const newDeptName = this.departments.find(d => d.id === newDepartmentId)?.name || 'Unknown';\n      const workflowParams = {\n        type: 'Transfer',\n        status: 'completed',\n        details: {\n          message: `Employee transfer completed`,\n          employeeId: this.id,\n          fromDepartment: {\n            id: this.oldDepartmentId,\n            name: oldDeptName\n          },\n          toDepartment: {\n            id: newDepartmentId,\n            name: newDeptName\n          },\n          timestamp: new Date().toISOString()\n        },\n        employeeId: this.id\n      };\n      console.log('Creating workflow with params:', workflowParams);\n      this.workflowService.create(workflowParams).pipe(first()).subscribe({\n        next: () => console.log('Workflow record created for transfer'),\n        error: error => console.error('Error creating workflow record', error)\n      });\n    }\n    static {\n      this.ɵfac = function TransferComponent_Factory(t) {\n        return new (t || TransferComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i3.EmployeeService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i3.WorkflowService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TransferComponent,\n        selectors: [[\"ng-component\"]],\n        decls: 20,\n        vars: 9,\n        consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"mb-4\", 4, \"ngIf\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"for\", \"departmentId\"], [\"formControlName\", \"departmentId\", 1, \"form-control\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm\", 4, \"ngIf\"], [\"routerLink\", \"../../\", 1, \"btn\", \"btn-link\"], [1, \"mb-4\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\"]],\n        template: function TransferComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵtext(2, \" Transfer Employee \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵtemplate(4, TransferComponent_div_4_Template, 11, 3, \"div\", 3);\n            i0.ɵɵelementStart(5, \"form\", 4);\n            i0.ɵɵlistener(\"ngSubmit\", function TransferComponent_Template_form_ngSubmit_5_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n            i0.ɵɵtext(8, \"New Department\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"select\", 7)(10, \"option\", 8);\n            i0.ɵɵtext(11, \"-- Select Department --\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(12, TransferComponent_option_12_Template, 2, 2, \"option\", 9);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(13, TransferComponent_div_13_Template, 2, 1, \"div\", 10);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"div\", 5)(15, \"button\", 11);\n            i0.ɵɵtemplate(16, TransferComponent_span_16_Template, 1, 0, \"span\", 12);\n            i0.ɵɵtext(17, \" Transfer \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(18, \"a\", 13);\n            i0.ɵɵtext(19, \"Cancel\");\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.employee);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.submitted && ctx.f.departmentId.errors));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.departmentId.errors);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          }\n        },\n        dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n        encapsulation: 2\n      });\n    }\n  }\n  return TransferComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}